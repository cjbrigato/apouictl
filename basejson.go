// Code generated by go-bindata.
// sources:
// data/relays.json
// data/sensors.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataRelaysJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xc1\x8e\xda\x30\x10\x86\xef\x3c\xc5\x28\xa7\x56\x82\xa0\x24\x40\xa1\xea\x85\xa6\xa4\xad\xd4\x16\x44\x29\xad\x54\xf5\xe0\x24\xa3\x62\xc9\xb1\x23\xc7\xa9\x54\xad\xf6\x99\xf6\x21\xf6\xc5\x56\x26\x2c\x59\x92\x78\x0d\xec\x05\x09\xfb\xf7\x78\xbe\x7f\x7e\xe7\x77\x0f\x00\x6e\xf4\x0f\x00\x38\x19\x29\x14\x4a\x9a\x3b\xf0\x16\x1c\x6f\xe6\xbb\xde\x64\xea\x7a\xee\xc8\x77\xfa\x8f\x92\x9c\x91\x04\xf7\xfb\xdf\x09\x13\x1c\x06\x10\x12\x4e\xf2\x5a\xc0\x44\x42\x18\x27\x59\x25\x92\xc8\xc8\x7f\xaf\xde\x4d\xb1\x48\x24\xcd\x15\x15\xfc\xa4\xc8\xc7\xf9\x8f\xf0\xd3\xa2\x59\xab\x50\x44\x95\xc5\x5e\xb8\x8c\xa2\x7a\x9d\xa6\x7a\xcd\x3b\xfe\x3f\x5e\x57\xe8\x72\x6e\xa2\xab\xb8\x87\xab\xb5\xe6\xb6\x7f\x82\x69\x2a\x6b\x6a\xee\xc3\x7a\xf9\x79\xd3\x6a\xce\x7c\xa9\xdf\xec\xd4\x7f\xce\x9d\x4b\xcc\x35\x0f\xa8\x03\xd3\x20\xf6\xa7\x76\x83\x9b\x4e\x84\x3b\x92\xc5\x12\xf5\xa0\x24\xe1\x29\xc2\x97\x32\xa3\x28\xb1\xc3\x8d\xa4\x92\xba\xcd\xc9\x57\x4e\x04\x1d\xac\x75\xf1\x48\xf0\x14\xfe\x92\x32\xd9\xa1\x25\x50\xd7\xe1\x9a\xb1\xb6\x48\x19\xc3\xb2\x40\x98\x73\x72\x7f\x57\xc0\xbb\xc0\xee\x52\x37\x73\x6b\xfa\xa3\x8b\xa7\x5f\xf7\x45\xa4\xd4\x3e\x0f\x18\x55\x17\x30\x4f\xce\x7d\x8e\xed\xc0\x7d\xc5\x32\x66\x08\x9b\x6d\x93\x62\x6c\x0a\x7e\xb6\x3f\xa1\xfe\xb5\x26\xfe\xd4\xb6\x6f\xe6\x21\x6c\xb6\x30\x84\x9f\x94\xc2\x10\xa2\xf5\x62\xf1\x7e\xf9\x0b\x5e\x85\x22\x8b\xc5\xeb\x2e\xe2\x73\x79\x56\x54\xd1\xb8\x94\x42\xbf\x21\xa1\x10\x56\x42\x2a\x34\x37\x61\x91\x5b\x13\x90\x1f\xce\xbb\xb9\x3e\x68\x08\xff\xc4\xf6\x8e\xfd\x71\x17\xb2\x2d\x17\x57\x7e\x7a\xbb\xc2\x1f\x0a\x46\xf9\x0b\xb2\x1f\x34\x91\xdf\xd8\x90\x83\x59\x85\xdc\xfb\xd3\x7b\x08\x00\x00\xff\xff\x95\xbb\xe7\xc9\x8c\x06\x00\x00")

func dataRelaysJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataRelaysJson,
		"data/relays.json",
	)
}

func dataRelaysJson() (*asset, error) {
	bytes, err := dataRelaysJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/relays.json", size: 1676, mode: os.FileMode(420), modTime: time.Unix(1507498711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSensorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd2\x4f\x6b\xfa\x30\x1c\x06\xf0\xfb\xef\x55\x3c\xf4\xf2\xbb\x68\x58\x3a\x75\xba\xab\x1b\xec\xe0\xd8\x40\x6f\x63\x87\xd8\x7e\x99\xc1\x34\x29\x49\x3a\x90\xb1\xf7\x3e\xfa\x47\x7b\xb0\xad\x19\xee\x62\xd1\x3c\x3c\xb1\x1f\x1e\x00\x6f\xc0\x3f\x00\xf8\xaa\x3e\x81\x48\xa6\x11\xee\xc1\x47\xc7\xef\x5a\x64\x54\xfe\x12\x39\xa1\x8c\x66\x9e\xb2\x9c\x39\xd2\xce\x58\x1e\x9d\x42\xca\x24\x42\x9d\x92\xdd\x99\x5c\x89\xa4\x3e\x5f\x97\x4d\x18\xe3\x99\x8a\xad\x22\x6c\x3e\xdb\x90\x3f\xe4\x14\xe1\x58\x42\x56\xf8\xc2\x52\x7b\x9c\x09\xe7\xc9\xca\xbc\xaa\xe1\x8b\x98\xf1\xd9\x9c\x71\xc6\xe7\x6d\x24\x25\x97\x58\x99\x7b\x69\x74\x95\xda\xb4\x3d\xa8\x2e\x6e\xa3\xce\x0b\x5f\xb8\x2a\x15\xdf\xb1\xe9\x4d\x84\xe6\xe4\x7b\x54\x3f\x3b\x69\xe2\x73\x9a\x64\x27\xb2\xad\xa5\x20\x9c\x01\x97\x65\x5d\x83\x31\x36\xa2\x84\x49\x09\xba\x90\x1e\x4b\xa3\xa4\xbe\xda\x68\x16\x66\xd4\xfc\x89\x4e\xa5\x30\xa0\xdb\xbe\xed\xec\x8a\x4c\xa6\x97\x7c\x7a\x42\xbf\x5c\x4f\xd5\x22\xfd\xe1\xaa\xe9\x3c\xd5\x25\x43\xbb\xe1\x33\xb6\x08\xdc\xcd\xa4\x7f\x37\x41\x30\x7f\x39\x9c\x70\x9e\x81\xd5\x9c\x78\xae\x9f\xcc\xf4\xdc\x26\x35\xc6\x32\x65\x92\x3d\xcb\xc4\x87\x26\xdf\xf0\x0c\xeb\x74\xe1\xbc\x1a\xeb\x09\xe9\x7f\xd2\xde\x12\x75\x69\x94\x57\x95\x37\x5d\xd4\x88\x27\xfd\x1a\x0f\xc6\x58\xac\x4c\xb2\xc7\xba\x7e\xfb\x2e\x8d\xe5\xea\x65\xfd\xd8\x92\x34\xcf\xf7\x9f\x00\x00\x00\xff\xff\xb2\x97\x10\x18\x88\x05\x00\x00")

func dataSensorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataSensorsJson,
		"data/sensors.json",
	)
}

func dataSensorsJson() (*asset, error) {
	bytes, err := dataSensorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sensors.json", size: 1416, mode: os.FileMode(420), modTime: time.Unix(1509494200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/relays.json": dataRelaysJson,
	"data/sensors.json": dataSensorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"relays.json": &bintree{dataRelaysJson, map[string]*bintree{}},
		"sensors.json": &bintree{dataSensorsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

